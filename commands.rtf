{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red241\green241\blue241;\red12\green92\blue97;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c95686\c95686\c95686;\cssrgb\c392\c43137\c45490;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl576\sa321\partightenfactor0

\f0\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Git Commands\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf2 A Summary of Commonly Used Commands\
\pard\pardeftab720\sl384\sa240\partightenfactor0

\f0\b0\fs24 \cf2 There are hundreds of different Git commands, but to get started you only need to remember a handful of them. Here is a summary of the commands you\'92ll use most often:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git init
\f0\fs24 \cb1 \'a0initializes your local directory as a new git repository. You must run this before you can commit any of your work.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git status
\f0\fs24 \cb1 \'a0shows the current status of your repo. It will show you if you have any work that is unstaged, what branch you are on, how many commits you are ahead of the master remote on github, and other useful things.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git diff
\f0\fs24 \cb1 \'a0shows you the changes in your unstaged code.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git remote -v
\f0\fs24 \cb1 \'a0shows you all the remotes for your repo. The\'a0
\f2\fs28\fsmilli14400 \cb3 v
\f0\fs24 \cb1 \'a0stands for verbose, which shows you the URL of the repository on github, if any, that your local repository is pointing to rather than just the name of the remote repo.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git add .
\f0\fs24 \cb1 \'a0takes all unstaged work and stages it, making it ready to be committed. You can also specify a particular file to stage with\'a0
\f2\fs28\fsmilli14400 \cb3 git add file-path/name-of-file
\f0\fs24 \cb1 \
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git commit -m "write commit message here"
\f0\fs24 \cb1 \'a0commits all staged work. It\'92s important to write a brief, clear commit message so you know what each commit is for. \'93Final commit\'94 is not the commit message you\'92re looking for exactly 100% of the time.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git pull
\f0\fs24 \cb1 \'a0once you\'92ve committed all your local work and running\'a0
\f2\fs28\fsmilli14400 \cb3 git status
\f0\fs24 \cb1 \'a0shows that you have nothing to commit, you pull down any changes from your remote. By default, this will pull from the\'a0
\f2\fs28\fsmilli14400 \cb3 origin
\f0\fs24 \cb1 \'a0remote\'92s\'a0
\f2\fs28\fsmilli14400 \cb3 master
\f0\fs24 \cb1 \'a0branch. To be specific about which remote and branch to pull from, you can use:\'a0
\f2\fs28\fsmilli14400 \cb3 git pull name-of-remote name-of-branch
\f0\fs24 \cb1 \
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git push
\f0\fs24 \cb1 \'a0pushes your local changes up to your remote. By default, this will push to the\'a0
\f2\fs28\fsmilli14400 \cb3 origin
\f0\fs24 \cb1 \'a0remote\'92s\'a0
\f2\fs28\fsmilli14400 \cb3 master
\f0\fs24 \cb1 \'a0branch. Like pull, you can push to a specific remote and branch with:\'a0
\f2\fs28\fsmilli14400 \cb3 git push name-of-remote name-of-branch
\f0\fs24 \cb1 . This is useful if you are using\'a0{\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"}}{\fldrslt \cf4 \strokec4 branches}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project#The-GitHub-Flow"}}{\fldrslt \cf4 \strokec4 pull requests}}. If you get an error message, it\'92s probably because you haven\'92t pushed your local branch up to github yet. Try\'a0
\f2\fs28\fsmilli14400 \cb3 git push -u name-of-remote name-of-branch
\f0\fs24 \cb1 .\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git branch
\f0\fs24 \cb1 \'a0shows you all your local branches and indicates which branch you are currently on.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git checkout -b name-of-new-branch
\f0\fs24 \cb1 \'a0makes a new branch and switches to that branch.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git merge name-of-branch
\f0\fs24 \cb1 \'a0will merge the specified branch into the branch you are currently on.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git branch -d name-of-branch-to-delete
\f0\fs24 \cb1 \'a0deletes the specified branch\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git log
\f0\fs24 \cb1 \'a0will show you the full list of commits and authors for your repo\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 history
\f0\fs24 \cb1 \'a0will show you your past git commands\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git stash
\f0\fs24 \cb1 \'a0stashes any unstaged changes in your repository. They will not be present in your codebase, but they are not deleted.\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git stash pop
\f0\fs24 \cb1 \'a0gives you back the last staged changes you stashed\
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git blame file-path/name-of-file
\f0\fs24 \cb1 \'a0shows you line-by-line who wrote the code in the specified file. Useful when you have a question about how something works and want to figure out who to ask, and also great source of shame when you realize you wrote the chunk of code you\'92ve been swearing at for the last hour.\
}